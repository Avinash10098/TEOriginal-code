public with sharing class BookingCancellationController {
    
    Public string bookId{get;set;}
    Public List<Booking__c> bookList{get;set;}
    public boolean isError{get;set;}
    Public string demandedAmount{get;set;}
    Public string paidAmount{get;set;}
    Public string outstandingAmount{get;set;}
    Public List<Opportunity> oppList{get;set;}
    Public string applicantNames{get;set;}
    public decimal amountOnAccount{get;set;}
    Public string amountOnAccountSTR{get;set;}
    Public List<Receipt__c> recList{get;set;}
    Public string refundAmountStr{get;set;}
    Public boolean isSave{get;set;}
    Public string demandedGST{get;set;}
    Public string paidGST{get;set;}
    Public string outstandingGST{get;set;}
    Public string amtrecieved{get;set;}
    Public string cancellationAmt{get;set;}
    Public Decimal refundAmount{get;set;}
    Public boolean amountdetails{get;set;}
    Public List<Receipt__c> rec{get;set;}
    public transient blob file { get; set; }
    public String fileName { get; set; }
    
    public BookingCancellationController() {
        
        bookList = new List<Booking__c>();
        isError = false;
        amountdetails = false;
        demandedAmount = '';
        paidAmount = '';
        outstandingAmount = '';
        oppList = new List<opportunity>();
        applicantNames = '';
        amountOnAccount = 0;
        recList = new List<Receipt__c>();
        refundAmountStr = '';
        refundAmount = 0;
        isSave = false;
        demandedGST = '';
        paidGST = '';
        outstandingGST = '';
        cancellationAmt = '';
        amtrecieved = '';
        if(ApexPages.currentPage().getParameters().get('Id') != null && ApexPages.currentPage().getParameters().get('Id') != '') {
            bookId = ApexPages.currentPage().getParameters().get('Id');
        }
        
        if(string.isNotBlank(bookId)){ 
            bookList = [SELECT id,name,Reason_For_Cancellation__c,Date_of_Cancellation__c,Reason_For_Cancellation_D__c,Refund_Amount__c,Cancellation_Charges__c,Project__c,
                        Unit__c,Opportunity__c,Opportunity__r.stageName,Booking_Date__c,Application_No__c,TotalAmountDemanded__c,TotalAmountPaid__c,TotalAmountBalance__c,
                        Status__c,Cancellation_In_Progress__c,Unit__r.Tower__c,Cancellation_Approver_1__c,Cancellation_Approver_2__c,Amount_On_Account__c,Total_Receipts_Amount__c,
                        Reverse_Demand__c,TotalTaxDemanded__c,Totaltaxpaid__c,TotalTaxBalance__c, Cluster__c, Tower__c, Agreement_Value__c,On_Account_Money__c,Refund_Amount_1__c,
                        Project__r.Cancellation_Amount__c,Application_Number__c,Total_Amount_Received__c,Cancellation_Initiated__c , Total_Amount__c
                        FROM booking__c WHERE id =:bookId];
            rec = [Select Id,Receipt_Status__c from Receipt__c WHERE Booking__c =:bookList[0].id];
            for(Receipt__c r: rec){
                if(r.Receipt_Status__c != 'Cleared' && r.Receipt_Status__c != 'Dishonored' && r.Receipt_Status__c != 'Physical Verification Rejected'){
                //    ApexPages.addmessage(new ApexPages.message(ApexPages.severity.ERROR,'Receipt Status Should be Cleared or Dishonoured or Rejected'));
                //    isError = true;
                    
                }
            }
            System.debug('bookId ::'+bookId);
            System.debug('booklist ::'+bookList);
            if(bookList[0].Cancellation_Initiated__c != false){
            amountdetails = true;
            if(!bookList.isEmpty()){
                if(string.isNotBlank(bookList[0].Status__c)){  /// && bookList[0].Status__c == 'Processed'
                    
                    if(bookList[0].Opportunity__c != null){
                        oppList = [SELECT id,name,Primary_Name__c,Other_Applicants_Name__c FROM Opportunity WHERE id =: bookList[0].Opportunity__c];
                        
                        if(!oppList.isEmpty()){
                            applicantNames = oppList[0].Primary_Name__c;
                            if(string.isNotBlank(oppList[0].Other_Applicants_Name__c))    
                                applicantNames += ', ' +  oppList[0].Other_Applicants_Name__c;
                            amountOnAccount = bookList[0].On_Account_Money__c;
                            system.debug('amount ON account'+amountOnAccount);
                        }
                    }
                    
                    amountOnAccountSTR = InventoryCostServices.INFormatR(amountOnAccount);
                    if(bookList[0].TotalAmountDemanded__c != null)
                        //demandedAmount = InventoryCostServices.INFormatR(bookList[0].TotalAmountDemanded__c);
                        if(!test.isRunningTest()){// Added By Sudhir 04 Jan 2021
                          demandedAmount = InventoryCostServices.INFormatR(bookList[0].Agreement_Value__c); 
                        }

                    if(bookList[0].TotalAmountPaid__c != null)    
                        paidAmount = InventoryCostServices.INFormatR(bookList[0].TotalAmountPaid__c);
                    if(bookList[0].TotalAmountBalance__c != null)
                        outstandingAmount = InventoryCostServices.INFormatR(bookList[0].TotalAmountBalance__c);
                    if(bookList[0].TotalTaxDemanded__c != null)
                        demandedGST = InventoryCostServices.INFormatR(bookList[0].TotalTaxDemanded__c);
                    if(bookList[0].Totaltaxpaid__c != null)    
                        paidGST = InventoryCostServices.INFormatR(bookList[0].Totaltaxpaid__c);
                    if(bookList[0].TotalTaxBalance__c != null)
                        outstandingGST = InventoryCostServices.INFormatR(bookList[0].TotalTaxBalance__c);
                    if(bookList[0].Total_Amount_Received__c != null ){
                        //amtrecieved = InventoryCostServices.INFormatR(bookList[0].Total_Amount_Received__c);
                        amtrecieved = String.valueOf(bookList[0].Total_Amount__c);
                    }
                    if(bookList[0].Project__r.Cancellation_Amount__c != null ){
                        cancellationAmt = InventoryCostServices.INFormatR(bookList[0].Project__r.Cancellation_Amount__c);
                    }
                    if(bookList[0].Status__c == 'Cancelled') {// Added By Sudhir 04 Jan 2020
                    ApexPages.addmessage(new ApexPages.message(ApexPages.severity.ERROR,'Unable to process your request. Selected booking is Already Cancelled.'));
                    isError = true;                    
                }

                }
                else{
                    ApexPages.addmessage(new ApexPages.message(ApexPages.severity.ERROR,'Unable to process your request. Selected booking is not the processed.'));
                    isError = true;
                }
            }
            else{
                ApexPages.addmessage(new ApexPages.message(ApexPages.severity.ERROR,'Unable to process your request. Selected booking is not available.'));
                isError = true;
            }
        }else{
            ApexPages.addmessage(new ApexPages.message(ApexPages.severity.ERROR,'Cancellation is not Initiated Yet.'));
        }
        }
        else{
            ApexPages.addmessage(new ApexPages.message(ApexPages.severity.ERROR,'Unable to process your request. Selected booking is not available.'));
            isError = true;
        }
        CalculateRefundforproject();
    }
     public void CalculateRefundforproject(){
        decimal totalReceipts = 0;
        //Decimal refundAmount = 0;
        if(!opplist.isEmpty())
            totalReceipts = getRefundAmount(oppList[0].id);
        system.debug('totalReceipts'+totalReceipts);
        Tax_Slab__c ts = new Tax_Slab__c();
        ts = [select id,name,Tax_Name__c,Tax1_Name__c,Tax1_Code__c,Tax1_Percentage__c,Taxable1_Percentage__c,Tax1_Percentage_on_100__c,Charge_Type__c,Tax2_Name__c,
              Tax2_Code__c,Tax2_Percentage__c,Taxable2_Percentage__c,Tax2_Percentage_on_100__c from Tax_Slab__c where Charge_Type__c = 'Cancellation'];
        
        bookList[0].Total_Receipts_Amount__c = totalReceipts;
        
        if(bookList[0].Project__r.Cancellation_Amount__c != null && bookList[0].Project__r.Cancellation_Amount__c > 0 ){
            bookList[0].Cancellation_Tax__c = (( bookList[0].Project__r.Cancellation_Amount__c * ts.Tax1_Percentage_on_100__c/100) + ( bookList[0].Project__r.Cancellation_Amount__c * ts.Tax2_Percentage_on_100__c/100)).setscale(0,RoundingMode.HALF_UP);
            refundAmount = totalReceipts - (bookList[0].Project__r.Cancellation_Amount__c + bookList[0].Cancellation_Tax__c); 
        }      
        else{
            refundAmount = totalReceipts;   
        }     
        refundAmountStr = InventoryCostServices.INFOrmat(refundAmount);
    }
    public void CalculateRefund(){
        
        decimal totalReceipts = 0;
       // Decimal refundAmount = 0;
        if(!opplist.isEmpty())
            totalReceipts = getRefundAmount(oppList[0].id);
        system.debug('totalReceipts'+totalReceipts);
        Tax_Slab__c ts = new Tax_Slab__c();
        ts = [select id,name,Tax_Name__c,Tax1_Name__c,Tax1_Code__c,Tax1_Percentage__c,Taxable1_Percentage__c,Tax1_Percentage_on_100__c,Charge_Type__c,Tax2_Name__c,
              Tax2_Code__c,Tax2_Percentage__c,Taxable2_Percentage__c,Tax2_Percentage_on_100__c from Tax_Slab__c where Charge_Type__c = 'Cancellation'];
        
        bookList[0].Total_Receipts_Amount__c = totalReceipts;
        
        if(bookList[0].Cancellation_Charges__c != null && bookList[0].Cancellation_Charges__c > 0){
            system.debug('bookList[0].Cancellation_Charges__c::'+bookList[0].Cancellation_Charges__c);
            
            bookList[0].Cancellation_Tax__c = (( bookList[0].Cancellation_Charges__c * ts.Tax1_Percentage_on_100__c/100) + ( bookList[0].Cancellation_Charges__c * ts.Tax2_Percentage_on_100__c/100)).setscale(0,RoundingMode.HALF_UP);
            
            refundAmount = totalReceipts - (bookList[0].Cancellation_Charges__c + bookList[0].Cancellation_Tax__c); 
        }    
        else{
            refundAmount = totalReceipts; 
            bookList[0].Cancellation_Tax__c = 0;
        }     
        refundAmountStr = InventoryCostServices.INFOrmat(refundAmount);
        
       
    }
    
    public void submit(){
       
        Boolean isErrorNew = false;             
        system.debug('Reason for cancellation:: '+bookList[0].Reason_For_Cancellation_D__c);
        if(string.isBlank(bookList[0].Reason_For_Cancellation_D__c)){
            ApexPages.addmessage(new ApexPages.message(ApexPages.severity.INFO,'Please select Reason for Cancellation.'));
            isErrorNew = true;
        }
        /*if(bookList[0].Cancellation_Charges__c == null){
            ApexPages.addmessage(new ApexPages.message(ApexPages.severity.INFO,'Please enter cancellation charges.'));
            isError = true;
        } */
        
        if(!isErrorNew){
            try{
                decimal totalReceipts = 0;
                
                
                List<Team_Members__c> approverTeam = new List<Team_Members__c>();
                approverTeam = [SELECT id,name,Team__c,User__c,Approver_Type__c FROM Team_Members__c 
                                WHERE Team__r.Team_Type__c = 'Cancellation Approval Team' 
                                AND Team__r.Project__c =: bookList[0].Project__c AND User_Active__c = true];
                if(!approverTeam.isEmpty()){
                    for(Team_Members__c tm : approverTeam){
                        if(string.isNotBlank(tm.Approver_Type__c) && tm.Approver_Type__c == 'First Level'){
                            bookList[0].Cancellation_Approver_1__c = tm.User__c;
                        }
                        /*if(string.isNotBlank(tm.Approver_Type__c ) && tm.Approver_Type__c == 'Second Level'){
                            bookList[0].Cancellation_Approver_2__c = tm.User__c;
                        }*/
                    }
                    if(!opplist.isEmpty())
                        totalReceipts = getRefundAmount(oppList[0].id);
                    
                    Tax_Slab__c ts = new Tax_Slab__c();
                    ts = [select id,name,Tax_Name__c,Tax1_Name__c,Tax1_Code__c,Tax1_Percentage__c,Taxable1_Percentage__c,Tax1_Percentage_on_100__c,Charge_Type__c,Tax2_Name__c,
                          Tax2_Code__c,Tax2_Percentage__c,Taxable2_Percentage__c,Tax2_Percentage_on_100__c from Tax_Slab__c where Charge_Type__c = 'Cancellation'];
                    
                    bookList[0].Total_Receipts_Amount__c = totalReceipts;
                     
                    if(refundAmount != null ){
                        refundAmount = refundAmount ;
                    }    
                    else{
                        refundAmount = totalReceipts;   
                    }
                    system.debug('refundAmount'+refundAmount);
                    refundAmountStr = InventoryCostServices.INFOrmat(refundAmount);
                    system.debug('refundAmountStr'+refundAmountStr);
                    system.debug('refundAmount'+refundAmount);
                    bookList[0].Amount_On_Account__c = amountOnAccount;  
                    bookList[0].Cancellation_In_Progress__c = true;
                    bookList[0].Status__c = 'Cancellation In Progress';
                    bookList[0].Refund_Amount_1__c = refundAmount;
                    update bookList[0];
                    System.debug('bookList ::'+bookList);
                    isSave = true;
                    Id bookId = bookList[0].id;
                    system.debug('bookId::'+bookId);
                    system.debug('file::'+file);
                    
                    ApexPages.addmessage(new ApexPages.message(ApexPages.severity.CONFIRM,'Booking cancellation process successfully submited and notification send to respective team.'));
                }
                else{
                    ApexPages.addmessage(new ApexPages.message(ApexPages.severity.ERROR,'There is no team member added in the cancellation team.'));
                    isErrorNew = true;
                }
            }
            catch(Exception e){
                system.debug('Exception:: '+e.getMessage());
                ApexPages.addMessages(e);
            } 
        }
    }
    
    //-----------------------------------File Upload Method--------------------------------------------
        public void upload() {
            if(bookId != null && file != null){
                system.debug('file::'+file);
                ContentVersion v = new ContentVersion();
                v.versionData = file;
                v.title = fileName;
                v.pathOnClient =fileName;
                //    v.FirstPublishLocationId = parentObj.Id; //similar to parentid
                insert v;
                
                
                ContentVersion cv = [SELECT Id, ContentDocumentId FROM ContentVersion where id =: v.id];  
                
                ContentDocumentLink cl = new ContentDocumentLink();
                cl.LinkedEntityId = bookId;
                cl.ShareType = 'I';
                cl.ContentDocumentId = cv.ContentDocumentId;
                insert cl;
                
                ApexPages.addmessage(new ApexPages.message(ApexPages.severity.INFO,'File Uploaded successfully.'));
            }
        }
    //-------------------------------------------------------------------------------------------------
   
    public PageReference goBackMethod(){
        PageReference pageRef;
        if(!bookList.isEmpty())
            pageRef = new PageReference('/' + bookList[0].id); 
        else
            pageRef = new PageReference('/home/home.jsp');    
        pageRef.setRedirect(true);
        return pageRef;
    }
    
    public static Decimal getRefundAmount(Id oppId) {
    List<Receipt__c> rList = [Select Id, Currency__c, Foreign_Currency_Type__c , On_Account_Money__c,On_Account_Money_Autocalculated__c,Amount_Rs__c from Receipt__c where Opportunity__r.Id  = : oppId and Amount_Rs__c > 0 and Receipt_Status__c NOT IN('Dishonored', 'Physical Verification Rejected', 'Cancelled')];//and Currency__c = 'AED'
    system.debug('RList'+rList);
    Decimal refundMoney = 0;
    if(rList.size() > 0) {
      for(Receipt__c r : rList) {
        if(r.Amount_Rs__c != null)
        refundMoney += r.Amount_Rs__c;
      }
    }
    return refundMoney;
  }
}
